@model List<OnlineShopUniPi.Models.Product>

@{
    ViewData["Title"] = "Clothes";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var selectedGender = ViewBag.SelectedGender as string ?? "Women";
    var selectedCategory = ViewBag.SelectedCategory as string;
    var favoriteProductIds = ViewBag.FavoriteProductIds as List<int> ?? new List<int>();
}

<!-- Hidden form used only to store the CSRF (anti-forgery) token, so it can be retrieved via JavaScript when making AJAX requests. -->
<form id="antiForgeryForm" style="display:none;">
    @Html.AntiForgeryToken()
</form>

<div class="container mt-5">
    <!-- Gender Filter -->
    <div class="section text-center mb-4">
        <h2 class="mb-3">Gender</h2>
        <div class="btn-group" role="group">
            <a asp-action="ClothingPage" asp-route-gender="Women" class="btn btn-outline-primary @(selectedGender == "Women" ? "active" : "")">Women</a>
            <a asp-action="ClothingPage" asp-route-gender="Men" class="btn btn-outline-primary @(selectedGender == "Men" ? "active" : "")">Men</a>
        </div>
    </div>

    <!-- Category Filter -->
    <div class="section text-center mb-5">
        <h2 class="mb-3">Categories</h2>
        <div class="d-flex flex-wrap justify-content-center gap-2">
            @{
                var categories = selectedGender == "Women"
                ? new[] { "Dresses and bodysuits", "T-shirts / Tops", "Jackets / Coats", "Beachwear / Swimwear", "Shirts and blouses", "Pants / Trousers", "Sweaters / Jumpers", "Jeans", "Hoodies / Sweatshirts", "Skirts and shorts", "Other" }
                : new[] { "Shirts", "T-shirts / Tops", "Sweaters and Hoodies", "Jackets / Coats", "Jeans and Pants", "Other" };

                foreach (var category in categories)
                {
                    <a asp-action="ClothingPage"
                       asp-route-gender="@selectedGender"
                       asp-route-category="@category"
                       class="btn btn-outline-secondary rounded-pill @(selectedCategory == category ? "active" : "")">
                        @category
                    </a>
                }
            }
        </div>
    </div>

    <!-- Products -->
    <div class="section">
        <h2 class="mb-4 text-center">Products</h2>
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @if (!Model.Any())
            {
                <p class="text-muted text-center">No products found for this selection.</p>
            }
            else
            {
                foreach (var item in Model)
                {
                    var images = item.ProductImages?.ToList() ?? new List<OnlineShopUniPi.Models.ProductImage>();
                    var hasImages = images.Count > 0;
                    var carouselId = $"carousel_{item.ProductId}";

                    int activeIndex = images.FindIndex(img => img.IsMainImage.HasValue && img.IsMainImage.Value);
                    if (activeIndex == -1) activeIndex = 0;

                    <div class="col">
                        <div class="card h-100 border-0 shadow-sm">
                            <div class="position-relative">
                                @if (hasImages)
                                {
                                    <div id="@carouselId" class="carousel slide" data-bs-interval="false">
                                        <div class="carousel-inner">
                                            @for (int i = 0; i < images.Count; i++)
                                            {
                                                <div class="carousel-item @(i == activeIndex ? "active" : "")">
                                                    <img src="@Url.Content("~/" + images[i].ImageUrl.TrimStart('/'))"
                                                         class="d-block w-100 object-fit-contain bg-light p-3"
                                                         style="height: 200px; z-index: 1; position: relative;"
                                                         alt="Image @(i + 1)">
                                                </div>
                                            }
                                        </div>

                                        @if (images.Count > 1)
                                        {
                                            <button class="carousel-control-prev" type="button" data-bs-target="#@carouselId" data-bs-slide="prev">
                                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                                <span class="visually-hidden">Previous</span>
                                            </button>
                                            <button class="carousel-control-next" type="button" data-bs-target="#@carouselId" data-bs-slide="next">
                                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                                <span class="visually-hidden">Next</span>
                                            </button>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <img src="~/images/resources/no_image.png" class="card-img-top p-3 object-fit-contain bg-light" alt="@item.Title" style="height: 200px;">
                                }

                                <!-- Status badge -->
                                <div class="position-absolute top-0 start-0 m-2">
                                    <span class="badge bg-@(item.Condition == "Νέο" ? "success" : "warning") text-dark">
                                        @item.Condition
                                    </span>
                                </div>

                                <!-- Favorites heart -->
                                @{
                                    var isFavorite = favoriteProductIds.Contains(item.ProductId);
                                }

                                <button type="button"
                                        class="btn btn-sm btn-light position-absolute top-0 end-0 m-2 favorite-toggle"
                                        data-product-id="@item.ProductId"
                                        title="Αγαπημένο"
                                        style="z-index: 1050;"
                                        onclick="toggleHeart(this, event)">
                                    <i class="bi @(isFavorite ? "bi-heart-fill" : "bi-heart") text-danger border border-dark rounded-circle p-1"
                                       style="font-size: 1.2rem;@(isFavorite ? " color:red;" : "")"></i>
                                </button>

                            </div>

                            <div class="card-body">
                                <h5 class="card-title fw-bold text-truncate">@item.Title</h5>
                                <p class="card-text text-muted small" style="min-height: 40px;">
                                    @(item.Description?.Length > 60 ? item.Description.Substring(0, 60) + "..." : item.Description)
                                </p>

                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span class="badge bg-secondary">@item.Category</span>
                                    <h5 class="text-primary mb-0">€@item.Price</h5>
                                </div>
                            </div>

                            <div class="card-footer bg-white border-top-0 d-flex justify-content-center pt-0">
                                <a asp-controller="Products" asp-action="Details" asp-route-id="@item.ProductId" class="btn btn-outline-primary btn-sm px-3">
                                    <i class="bi bi-eye-fill me-1"></i> Λεπτομέρειες
                                </a>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function getAntiForgeryToken() {
            const tokenInput = document.querySelector('#antiForgeryForm input[name="__RequestVerificationToken"]');
            return tokenInput ? tokenInput.value : '';
        }

        function toggleHeart(button, event) {
            event.preventDefault();

            const icon = button.querySelector('i');
            const productId = parseInt(button.getAttribute('data-product-id'));

            fetch('/Products/Favorites', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify({ productId: productId })  
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    if (icon.classList.contains('bi-heart')) {
                        icon.classList.remove('bi-heart');
                        icon.classList.add('bi-heart-fill');
                        icon.style.color = 'red';
                    } else {
                        icon.classList.remove('bi-heart-fill');
                        icon.classList.add('bi-heart');
                        icon.style.color = '';
                    }
                } else {
                    alert('Προέκυψε πρόβλημα.');
                }
            })
            .catch(() => alert('Προέκυψε σφάλμα στο αίτημα.'));
        }
    </script>
}