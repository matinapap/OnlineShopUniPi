@using Newtonsoft.Json
@using System.Security.Claims
@model OnlineShopUniPi.Models.Product

@{
    ViewData["Title"] = "Product Details";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var cartJson = Context.Session.GetString("Cart");
    var cart = string.IsNullOrEmpty(cartJson)
        ? new Dictionary<int, int>()
        : JsonConvert.DeserializeObject<Dictionary<int, int>>(cartJson);

    bool inCart = cart.ContainsKey(Model.ProductId);
    int quantityInCart = cart.ContainsKey(Model.ProductId) ? cart[Model.ProductId] : 1;

    var userIdValue = User.FindFirstValue(ClaimTypes.NameIdentifier);
    int.TryParse(userIdValue, out int currentUserId);
    bool isOwner = Model.UserId == currentUserId;
    bool isAuthenticated = User.Identity.IsAuthenticated;

    var favoriteProductIds = ViewData["FavoriteProductIds"] as List<int> ?? new List<int>();
    bool isFavorite = favoriteProductIds.Contains(Model.ProductId);
}

<h1 class="my-4 text-center specific-title">@Model.Title</h1>

<div class="card shadow p-4 mb-4 position-relative">
    @if (isAuthenticated && !isOwner && !(User.IsInRole("Admin")))
    {
        <button type="button"
                class="btn btn-sm btn-light position-absolute top-0 end-0 m-2 favorite-toggle"
                data-product-id="@Model.ProductId"
                title="Αγαπημένο"
                style="z-index: 1050;">
            <i class="bi @(isFavorite ? "bi-heart-fill" : "bi-heart") text-danger border border-dark rounded-circle p-1"
               style="font-size: 1.2rem;@(isFavorite ? " color:red;" : "")"></i>
        </button>
    }

    <div class="row g-4">
        <!-- Product Information -->
        <div class="col-md-6">
            <h4>Product Details</h4>
            <dl class="row">
                <dt class="col-sm-4">Description</dt>
                <dd class="col-sm-8">@Model.Description</dd>

                <dt class="col-sm-4">Gender</dt>
                <dd class="col-sm-8">@Model.Gender</dd>

                <dt class="col-sm-4">Category</dt>
                <dd class="col-sm-8">@Model.Category</dd>

                <dt class="col-sm-4">Price</dt>
                <dd class="col-sm-8">€@Model.Price</dd>

                <dt class="col-sm-4">Condition</dt>
                <dd class="col-sm-8">@Model.Condition</dd>

                <dt class="col-sm-4">Quantity</dt>
                <dd class="col-sm-8">@Model.Quantity</dd>

                <dt class="col-sm-4">Size</dt>
                <dd class="col-sm-8">@Model.Size</dd>

                <dt class="col-sm-4">Created At</dt>
                <dd class="col-sm-8">@Model.CreatedAt</dd>

                <dt class="col-sm-4">Owner</dt>
                <dd class="col-sm-8">@Model.User?.Email</dd>
            </dl>
        </div>

        <!-- Product Images -->
        <div class="col-md-6">
            <h5>Product Images</h5>
            @if (Model.ProductImages != null && Model.ProductImages.Any())
            {
                <div class="d-flex flex-wrap gap-2">
                    @foreach (var image in Model.ProductImages)
                    {
                        <img src="@image.ImageUrl" alt="Product image" class="img-thumbnail" style="width: 120px; height: 120px; object-fit: cover;" />
                    }
                </div>
            }
            else
            {
                <p class="text-muted fst-italic">No images available.</p>
            }
        </div>
    </div>
</div>

<div class="text-center mt-3">
    @if (isAuthenticated)
    {
        @if (isOwner)
        {
            <a asp-action="Edit" asp-route-id="@Model.ProductId" class="btn btn-warning me-2">✏️ Edit Product</a>
        }
        else if (!User.IsInRole("Admin"))
        {
            <form asp-controller="Products" asp-action="AddToCart" method="post" class="d-inline">

                    @Html.AntiForgeryToken()
                <input type="hidden" name="id" value="@Model.ProductId" />

                <div class="input-group mb-3 d-inline-flex" style="max-width: 160px;">
                    <button type="button" class="btn btn-outline-secondary" id="decreaseBtn">-</button>
                    <input type="number" id="quantityInput" name="quantity" class="form-control text-center" value="1" min="1" max="@Model.Quantity" />
                    <button type="button" class="btn btn-outline-secondary" id="increaseBtn">+</button>
                </div>

                @if (inCart)
                {
                    <button class="btn btn-secondary" disabled>🛒 Already in Cart (Qty: @quantityInCart)</button>
                }
                else
                {
                    <button type="submit" class="btn btn-primary">🛒 Add to Cart</button>
                }
            </form>
        }
    }
    else
    {
        <p class="text-muted">Log in to purchase or edit this product.</p>
    }
</div>

@section Scripts {
    <script>
        function getAntiForgeryToken() {
            // Αντικείμενο form δεν υπάρχει, μπορούμε να το προσθέσουμε
            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            return tokenInput ? tokenInput.value : '';
        }

        function toggleHeart(button, event) {
            event.preventDefault();

            const icon = button.querySelector('i');
            const productId = parseInt(button.dataset.productId);
            const token = getAntiForgeryToken();

            fetch('/Products/Favorites', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ ProductId: productId })
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    // Toggle icon
                    icon.classList.toggle('bi-heart');
                    icon.classList.toggle('bi-heart-fill');
                    icon.style.color = icon.classList.contains('bi-heart-fill') ? 'red' : '';
                } else {
                    alert(data.message || 'Προέκυψε πρόβλημα.');
                }
            })
            .catch(() => alert('Σφάλμα στο αίτημα.'));
        }

        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('.favorite-toggle').forEach(button => {
                button.addEventListener('click', function(event) {
                    toggleHeart(button, event);
                });
            });
        });
    </script>
}


