@using Newtonsoft.Json
@using System.Security.Claims
@model OnlineShopUniPi.Models.Product

@{
    ViewData["Title"] = "Product Details";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var cartJson = Context.Session.GetString("Cart");
    var cart = string.IsNullOrEmpty(cartJson)
        ? new Dictionary<int, int>()
        : JsonConvert.DeserializeObject<Dictionary<int, int>>(cartJson);

    bool inCart = cart.ContainsKey(Model.ProductId);
    int quantityInCart = cart.ContainsKey(Model.ProductId) ? cart[Model.ProductId] : 1;

    var userIdValue = User.FindFirstValue(ClaimTypes.NameIdentifier);
    int.TryParse(userIdValue, out int currentUserId);
    bool isOwner = Model.UserId == currentUserId;
    bool isAuthenticated = User.Identity.IsAuthenticated;

    var favoriteProductIds = ViewData["FavoriteProductIds"] as List<int> ?? new List<int>();
    bool isFavorite = favoriteProductIds.Contains(Model.ProductId);
}

<h1 class="my-4 text-center specific-title">@Model.Title</h1>

<div class="card shadow p-4 mb-4 position-relative">
    @if (isAuthenticated && !isOwner && !User.IsInRole("Admin"))
    {
        <button type="button"
                class="btn btn-sm btn-light position-absolute top-0 end-0 m-2 favorite-toggle"
                data-product-id="@Model.ProductId"
                title="Αγαπημένο"
                style="z-index: 1050;">
            <i class="bi @(isFavorite ? "bi-heart-fill text-danger" : "bi-heart text-dark")
                      border border-dark rounded-circle p-1"
               style="font-size: 1.2rem;"></i>
        </button>
    }

    <div class="row g-4">
        <!-- Product Information -->
        <div class="col-md-6">
            <h4>Product Details</h4>
            <dl class="row">
                <dt class="col-sm-4">Description</dt>
                <dd class="col-sm-8">@Model.Description</dd>

                <dt class="col-sm-4">Gender</dt>
                <dd class="col-sm-8">@Model.Gender</dd>

                <dt class="col-sm-4">Category</dt>
                <dd class="col-sm-8">@Model.Category</dd>

                <dt class="col-sm-4">Price</dt>
                <dd class="col-sm-8">€@Model.Price</dd>

                <dt class="col-sm-4">Condition</dt>
                <dd class="col-sm-8">@Model.Condition</dd>

                <dt class="col-sm-4">Quantity</dt>
                <dd class="col-sm-8">@Model.Quantity</dd>

                <dt class="col-sm-4">Size</dt>
                <dd class="col-sm-8">@Model.Size</dd>

                <dt class="col-sm-4">Created At</dt>
                <dd class="col-sm-8">@Model.CreatedAt</dd>

                <dt class="col-sm-4">Owner</dt>
                <dd class="col-sm-8">@Model.User?.Email</dd>
            </dl>
        </div>

        <!-- Product Images -->
        <div class="col-md-6">
            <h5>Product Images</h5>
            @if (Model.ProductImages != null && Model.ProductImages.Any())
            {
                <div class="d-flex flex-wrap gap-2">
                    @foreach (var image in Model.ProductImages)
                    {
                        <img src="@image.ImageUrl" alt="Product image" class="img-thumbnail"
                             style="width: 120px; height: 120px; object-fit: cover;" />
                    }
                </div>
            }
            else
            {
                <p class="text-muted fst-italic">No images available.</p>
            }
        </div>
    </div>
</div>

<div class="text-center mt-3">
    @if (isAuthenticated)
    {
        @if (isOwner)
        {
            <a asp-action="Edit" asp-route-id="@Model.ProductId"
               class="btn btn-warning me-2">✏️ Edit Product</a>
        }
        else if (!User.IsInRole("Admin"))
        {
            <form asp-controller="Products" asp-action="AddToCart" method="post" class="d-inline">
                @Html.AntiForgeryToken()
                <input type="hidden" name="id" value="@Model.ProductId" />

                @if (inCart)
                {
                    <button class="btn btn-secondary" disabled>
                        🛒 Already in Cart (Qty: @quantityInCart)
                    </button>
                }
                else
                {
                    <div class="input-group mb-3 d-inline-flex" style="max-width: 160px;">
                        <button type="button" class="btn btn-outline-secondary" id="decreaseBtn">-</button>
                        <input type="number" id="quantityInput" name="quantity"
                               class="form-control text-center" value="1" min="1" max="@Model.Quantity" />
                        <button type="button" class="btn btn-outline-secondary" id="increaseBtn">+</button>
                    </div>

                    <button type="submit" class="btn btn-primary">🛒 Add to Cart</button>
                }
            </form>
        }
    }
    else
    {
        <p class="text-muted">Log in to purchase or edit this product.</p>
    }
</div>

<br />

@if (ViewData["RecommendedProducts"] is List<OnlineShopUniPi.Models.Product> recommended && recommended.Any())
{
    <div class="mt-5">
        <h4 class="mb-3 text-center">Σου προτείνουμε επίσης</h4>
        <div class="row row-cols-1 row-cols-md-4 g-4">
            @foreach (var rec in recommended)
            {
                var isRecFavorite = favoriteProductIds.Contains(rec.ProductId);

                <div class="col">
                    <div class="card h-100 shadow-sm position-relative">
                        @if (isAuthenticated && rec.UserId != currentUserId && !User.IsInRole("Admin"))
                        {
                            <button type="button"
                                    class="btn btn-sm btn-light position-absolute top-0 end-0 m-2 favorite-toggle"
                                    data-product-id="@rec.ProductId"
                                    title="Αγαπημένο">
                                <i class="bi @(isRecFavorite ? "bi-heart-fill text-danger" : "bi-heart text-dark")
                                          border border-dark rounded-circle p-1"
                                   style="font-size: 1rem;"></i>
                            </button>
                        }

                        @if (rec.ProductImages != null && rec.ProductImages.Any())
                        {
                            <img src="@rec.ProductImages.First().ImageUrl"
                                 class="card-img-top"
                                 alt="Product image"
                                 style="height: 160px; object-fit: cover;" />
                        }
                        else
                        {
                            <div class="card-img-top d-flex align-items-center justify-content-center bg-light"
                                 style="height: 160px;">
                                <span class="text-muted">No image</span>
                            </div>
                        }

                        <div class="card-body text-center">
                            <h6 class="card-title">@rec.Title</h6>
                            <p class="card-text text-muted">€@rec.Price</p>
                            <a asp-action="Details" asp-route-id="@rec.ProductId"
                               class="btn btn-sm btn-outline-primary">Προβολή</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}


@section Scripts {
    <script>
        function getAntiForgeryToken() {
            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            return tokenInput ? tokenInput.value : '';
        }

        async function toggleHeart(button, event) {
            event.preventDefault();

            const icon = button.querySelector('i');
            const productId = parseInt(button.dataset.productId);
            const token = getAntiForgeryToken();

            try {
                const res = await fetch('/Products/Favorites', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({ ProductId: productId })
                });

                if (!res.ok) throw new Error("Server error");

                const data = await res.json();

                if (data.success) {
                    icon.classList.toggle('bi-heart');
                    icon.classList.toggle('bi-heart-fill');
                    icon.classList.toggle('text-danger');
                    icon.classList.toggle('text-dark');
                } else {
                    alert(data.message || 'Προέκυψε πρόβλημα.');
                }
            } catch (err) {
                console.error(err);
                alert('Σφάλμα στο αίτημα.');
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            // Toggle favorites
            document.querySelectorAll('.favorite-toggle').forEach(button => {
                button.addEventListener('click', event => toggleHeart(button, event));
            });

            // Quantity buttons
            const decreaseBtn = document.getElementById("decreaseBtn");
            const increaseBtn = document.getElementById("increaseBtn");
            const quantityInput = document.getElementById("quantityInput");

            if (decreaseBtn && increaseBtn && quantityInput) {
                const maxQuantity = parseInt(quantityInput.max);

                decreaseBtn.addEventListener("click", () => {
                    let val = parseInt(quantityInput.value) || 1;
                    if (val > 1) quantityInput.value = val - 1;
                });

                increaseBtn.addEventListener("click", () => {
                    let val = parseInt(quantityInput.value) || 1;
                    if (val < maxQuantity) quantityInput.value = val + 1;
                });
            }
        });
    </script>
}
